%% Generated by the Erlang ASN.1 BER compiler. Version: 5.0
%% Purpose: Encoding and decoding of the types in X3-PROTOCOL.

-module('X3-PROTOCOL').
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-include("X3-PROTOCOL.hrl").
-asn1_info([{vsn,'5.0'},
            {module,'X3-PROTOCOL'},
            {options,[ber,verbose,{i,"."}]}]).

-export([encoding_rule/0,maps/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
enc_ProtocolVersion/2,
enc_MessageSerialNo/2,
enc_NEID/2,
enc_ICIDValue/2,
enc_CCCId/2,
enc_IpAddress/2,
enc_Port/2,
enc_IPPortInfo/2,
enc_CreateLICTResult/2,
enc_DataDirection/2,
enc_MediaType/2,
enc_ProtocolType/2,
enc_DataPayload/2,
enc_PayloadList/2,
enc_DeleteLICTReason/2,
enc_TunnelFailureReason/2,
enc_CreateLICTReq/2,
enc_CreateLICTAck/2,
enc_DeleteLICTReq/2,
enc_DeleteLICTAck/2,
enc_CommunicationContentReport/2,
enc_X3CheckStateReq/2,
enc_X3CheckStateAck/2,
enc_X3Interface/2
]).

-export([
dec_ProtocolVersion/2,
dec_MessageSerialNo/2,
dec_NEID/2,
dec_ICIDValue/2,
dec_CCCId/2,
dec_IpAddress/2,
dec_Port/2,
dec_IPPortInfo/2,
dec_CreateLICTResult/2,
dec_DataDirection/2,
dec_MediaType/2,
dec_ProtocolType/2,
dec_DataPayload/2,
dec_PayloadList/2,
dec_DeleteLICTReason/2,
dec_TunnelFailureReason/2,
dec_CreateLICTReq/2,
dec_CreateLICTAck/2,
dec_DeleteLICTReq/2,
dec_DeleteLICTAck/2,
dec_CommunicationContentReport/2,
dec_X3CheckStateReq/2,
dec_X3CheckStateAck/2,
dec_X3Interface/2
]).

-export([info/0]).

-export([encode/2,decode/2]).

encoding_rule() -> ber.

maps() -> false.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      Stk = erlang:get_stacktrace(),
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

decode(Type, Data) ->
try decode_disp(Type, element(1, ber_decode_nif(Data))) of
  Result ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      Stk = erlang:get_stacktrace(),
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

encode_disp('ProtocolVersion', Data) -> enc_ProtocolVersion(Data);
encode_disp('MessageSerialNo', Data) -> enc_MessageSerialNo(Data);
encode_disp('NEID', Data) -> enc_NEID(Data);
encode_disp('ICIDValue', Data) -> enc_ICIDValue(Data);
encode_disp('CCCId', Data) -> enc_CCCId(Data);
encode_disp('IpAddress', Data) -> enc_IpAddress(Data);
encode_disp('Port', Data) -> enc_Port(Data);
encode_disp('IPPortInfo', Data) -> enc_IPPortInfo(Data);
encode_disp('CreateLICTResult', Data) -> enc_CreateLICTResult(Data);
encode_disp('DataDirection', Data) -> enc_DataDirection(Data);
encode_disp('MediaType', Data) -> enc_MediaType(Data);
encode_disp('ProtocolType', Data) -> enc_ProtocolType(Data);
encode_disp('DataPayload', Data) -> enc_DataPayload(Data);
encode_disp('PayloadList', Data) -> enc_PayloadList(Data);
encode_disp('DeleteLICTReason', Data) -> enc_DeleteLICTReason(Data);
encode_disp('TunnelFailureReason', Data) -> enc_TunnelFailureReason(Data);
encode_disp('CreateLICTReq', Data) -> enc_CreateLICTReq(Data);
encode_disp('CreateLICTAck', Data) -> enc_CreateLICTAck(Data);
encode_disp('DeleteLICTReq', Data) -> enc_DeleteLICTReq(Data);
encode_disp('DeleteLICTAck', Data) -> enc_DeleteLICTAck(Data);
encode_disp('CommunicationContentReport', Data) -> enc_CommunicationContentReport(Data);
encode_disp('X3CheckStateReq', Data) -> enc_X3CheckStateReq(Data);
encode_disp('X3CheckStateAck', Data) -> enc_X3CheckStateAck(Data);
encode_disp('X3Interface', Data) -> enc_X3Interface(Data);
encode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

decode_disp('ProtocolVersion', Data) -> dec_ProtocolVersion(Data);
decode_disp('MessageSerialNo', Data) -> dec_MessageSerialNo(Data);
decode_disp('NEID', Data) -> dec_NEID(Data);
decode_disp('ICIDValue', Data) -> dec_ICIDValue(Data);
decode_disp('CCCId', Data) -> dec_CCCId(Data);
decode_disp('IpAddress', Data) -> dec_IpAddress(Data);
decode_disp('Port', Data) -> dec_Port(Data);
decode_disp('IPPortInfo', Data) -> dec_IPPortInfo(Data);
decode_disp('CreateLICTResult', Data) -> dec_CreateLICTResult(Data);
decode_disp('DataDirection', Data) -> dec_DataDirection(Data);
decode_disp('MediaType', Data) -> dec_MediaType(Data);
decode_disp('ProtocolType', Data) -> dec_ProtocolType(Data);
decode_disp('DataPayload', Data) -> dec_DataPayload(Data);
decode_disp('PayloadList', Data) -> dec_PayloadList(Data);
decode_disp('DeleteLICTReason', Data) -> dec_DeleteLICTReason(Data);
decode_disp('TunnelFailureReason', Data) -> dec_TunnelFailureReason(Data);
decode_disp('CreateLICTReq', Data) -> dec_CreateLICTReq(Data);
decode_disp('CreateLICTAck', Data) -> dec_CreateLICTAck(Data);
decode_disp('DeleteLICTReq', Data) -> dec_DeleteLICTReq(Data);
decode_disp('DeleteLICTAck', Data) -> dec_DeleteLICTAck(Data);
decode_disp('CommunicationContentReport', Data) -> dec_CommunicationContentReport(Data);
decode_disp('X3CheckStateReq', Data) -> dec_X3CheckStateReq(Data);
decode_disp('X3CheckStateAck', Data) -> dec_X3CheckStateAck(Data);
decode_disp('X3Interface', Data) -> dec_X3Interface(Data);
decode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  ProtocolVersion
%%================================
enc_ProtocolVersion(Val) ->
    enc_ProtocolVersion(Val, [<<10>>]).

enc_ProtocolVersion(Val, TagIn) ->
case Val of
io1 -> encode_tags(TagIn, [1], 1);
io2 -> encode_tags(TagIn, [2], 1);
io3 -> encode_tags(TagIn, [3], 1);
io4 -> encode_tags(TagIn, [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


dec_ProtocolVersion(Tlv) ->
   dec_ProtocolVersion(Tlv, [10]).

dec_ProtocolVersion(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
1 -> io1;
2 -> io2;
3 -> io3;
4 -> io4;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  MessageSerialNo
%%================================
enc_MessageSerialNo(Val) ->
    enc_MessageSerialNo(Val, [<<2>>]).

enc_MessageSerialNo(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_MessageSerialNo(Tlv) ->
   dec_MessageSerialNo(Tlv, [2]).

dec_MessageSerialNo(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  NEID
%%================================
enc_NEID(Val) ->
    enc_NEID(Val, [<<4>>]).

enc_NEID(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


dec_NEID(Tlv) ->
   dec_NEID(Tlv, [4]).

dec_NEID(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 256 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ICIDValue
%%================================
enc_ICIDValue(Val) ->
    enc_ICIDValue(Val, [<<4>>]).

enc_ICIDValue(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


dec_ICIDValue(Tlv) ->
   dec_ICIDValue(Tlv, [4]).

dec_ICIDValue(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  CCCId
%%================================
enc_CCCId(Val) ->
    enc_CCCId(Val, [<<2>>]).

enc_CCCId(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_CCCId(Tlv) ->
   dec_CCCId(Tlv, [2]).

dec_CCCId(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  IpAddress
%%================================
enc_IpAddress(Val) ->
    enc_IpAddress(Val, [<<4>>]).

enc_IpAddress(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


dec_IpAddress(Tlv) ->
   dec_IpAddress(Tlv, [4]).

dec_IpAddress(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 4 =< C1, C1 =< 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Port
%%================================
enc_Port(Val) ->
    enc_Port(Val, [<<2>>]).

enc_Port(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_Port(Tlv) ->
   dec_Port(Tlv, [2]).

dec_Port(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  IPPortInfo
%%================================
enc_IPPortInfo(Val) ->
    enc_IPPortInfo(Val, [<<48>>]).

enc_IPPortInfo(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute port(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute ipAddr(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_IPPortInfo(Tlv) ->
   dec_IPPortInfo(Tlv, [16]).

dec_IPPortInfo(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute port(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute ipAddr(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_octet_string(V2, [131073]),
C1 = byte_size(Val2),
if 4 =< C1, C1 =< 16 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'IPPortInfo',Term1,Term2},
Res1.


%%================================
%%  CreateLICTResult
%%================================
enc_CreateLICTResult(Val) ->
    enc_CreateLICTResult(Val, [<<10>>]).

enc_CreateLICTResult(Val, TagIn) ->
case Val of
tunnelCreateSuccess -> encode_tags(TagIn, [0], 1);
tunnelCreateFail -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


dec_CreateLICTResult(Tlv) ->
   dec_CreateLICTResult(Tlv, [10]).

dec_CreateLICTResult(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> tunnelCreateSuccess;
1 -> tunnelCreateFail;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  DataDirection
%%================================
enc_DataDirection(Val) ->
    enc_DataDirection(Val, [<<10>>]).

enc_DataDirection(Val, TagIn) ->
case Val of
upLink -> encode_tags(TagIn, [0], 1);
downLink -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


dec_DataDirection(Tlv) ->
   dec_DataDirection(Tlv, [10]).

dec_DataDirection(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> upLink;
1 -> downLink;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  MediaType
%%================================
enc_MediaType(Val) ->
    enc_MediaType(Val, [<<4>>]).

enc_MediaType(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


dec_MediaType(Tlv) ->
   dec_MediaType(Tlv, [4]).

dec_MediaType(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ProtocolType
%%================================
enc_ProtocolType(Val) ->
    enc_ProtocolType(Val, [<<2>>]).

enc_ProtocolType(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_ProtocolType(Tlv) ->
   dec_ProtocolType(Tlv, [2]).

dec_ProtocolType(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  DataPayload
%%================================
enc_DataPayload(Val) ->
    enc_DataPayload(Val, [<<4>>]).

enc_DataPayload(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


dec_DataPayload(Tlv) ->
   dec_DataPayload(Tlv, [4]).

dec_DataPayload(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  PayloadList
%%================================
enc_PayloadList(Val) ->
    enc_PayloadList(Val, [<<48>>]).

enc_PayloadList(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_PayloadList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_PayloadList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PayloadList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_PayloadList_SEQOF'(H, [<<48>>]),
   'enc_PayloadList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  PayloadList_SEQOF
%%================================
enc_PayloadList_SEQOF(Val, TagIn) ->
   {_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute mediaType(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute protocolType(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute payload(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_PayloadList(Tlv) ->
   dec_PayloadList(Tlv, [16]).

dec_PayloadList(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_PayloadList_SEQOF'(V1, [16]) || V1 <- Tlv1].


'dec_PayloadList_SEQOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute mediaType(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute protocolType(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 255 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute payload(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_octet_string(V3, [131074]),
C2 = byte_size(Val3),
if 1 =< C2, C2 =< 65535 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'PayloadList_SEQOF',Term1,Term2,Term3},
Res1.


%%================================
%%  DeleteLICTReason
%%================================
enc_DeleteLICTReason(Val) ->
    enc_DeleteLICTReason(Val, [<<10>>]).

enc_DeleteLICTReason(Val, TagIn) ->
case Val of
callEnd -> encode_tags(TagIn, [0], 1);
abnormal -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


dec_DeleteLICTReason(Tlv) ->
   dec_DeleteLICTReason(Tlv, [10]).

dec_DeleteLICTReason(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> callEnd;
1 -> abnormal;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  TunnelFailureReason
%%================================
enc_TunnelFailureReason(Val) ->
    enc_TunnelFailureReason(Val, [<<10>>]).

enc_TunnelFailureReason(Val, TagIn) ->
case Val of
usernumberNotExist -> encode_tags(TagIn, [0], 1);
monitorNumerNotExist -> encode_tags(TagIn, [1], 1);
monitorNumberBeSet -> encode_tags(TagIn, [2], 1);
parameterError -> encode_tags(TagIn, [3], 1);
resourceLimited -> encode_tags(TagIn, [4], 1);
noMonitor -> encode_tags(TagIn, [5], 1);
otherReason -> encode_tags(TagIn, [0,255], 2);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


dec_TunnelFailureReason(Tlv) ->
   dec_TunnelFailureReason(Tlv, [10]).

dec_TunnelFailureReason(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> usernumberNotExist;
1 -> monitorNumerNotExist;
2 -> monitorNumberBeSet;
3 -> parameterError;
4 -> resourceLimited;
5 -> noMonitor;
255 -> otherReason;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  CreateLICTReq
%%================================
enc_CreateLICTReq(Val) ->
    enc_CreateLICTReq(Val, [<<48>>]).

enc_CreateLICTReq(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5} = Val,

%%-------------------------------------------------
%% attribute messageSerialNo(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute neID(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute icidValue(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute cCC-ID(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute termAddr(5)   External X3-PROTOCOL:IPPortInfo OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IPPortInfo'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_CreateLICTReq(Tlv) ->
   dec_CreateLICTReq(Tlv, [16]).

dec_CreateLICTReq(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute messageSerialNo(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute neID(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_octet_string(V2, [131073]),
C1 = byte_size(Val2),
if 1 =< C1, C1 =< 256 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute icidValue(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_octet_string(V3, [131074]),
C2 = byte_size(Val3),
if 1 =< C2, C2 =< 255 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cCC-ID(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val4 = decode_integer(V4, [131075]),
if 0 =< Val4, Val4 =< 4294967295 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute termAddr(5)   External X3-PROTOCOL:IPPortInfo OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_IPPortInfo'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
Res1 = {'CreateLICTReq',Term1,Term2,Term3,Term4,Term5},
Res1.


%%================================
%%  CreateLICTAck
%%================================
enc_CreateLICTAck(Val) ->
    enc_CreateLICTAck(Val, [<<48>>]).

enc_CreateLICTAck(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5} = Val,

%%-------------------------------------------------
%% attribute messageSerialNo(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute icidValue(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute cCC-ID(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute x3TunnelCreateResult(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
tunnelCreateSuccess -> encode_tags([<<131>>], [0], 1);
tunnelCreateFail -> encode_tags([<<131>>], [1], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute x3TunnelFailureReason(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex5 of
usernumberNotExist -> encode_tags([<<132>>], [0], 1);
monitorNumerNotExist -> encode_tags([<<132>>], [1], 1);
monitorNumberBeSet -> encode_tags([<<132>>], [2], 1);
parameterError -> encode_tags([<<132>>], [3], 1);
resourceLimited -> encode_tags([<<132>>], [4], 1);
noMonitor -> encode_tags([<<132>>], [5], 1);
otherReason -> encode_tags([<<132>>], [0,255], 2);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_CreateLICTAck(Tlv) ->
   dec_CreateLICTAck(Tlv, [16]).

dec_CreateLICTAck(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute messageSerialNo(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute icidValue(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_octet_string(V2, [131073]),
C1 = byte_size(Val2),
if 1 =< C1, C1 =< 255 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cCC-ID(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [131074]),
if 0 =< Val3, Val3 =< 4294967295 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute x3TunnelCreateResult(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [131075]) of
0 -> tunnelCreateSuccess;
1 -> tunnelCreateFail;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute x3TunnelFailureReason(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {case decode_integer(V5, []) of
0 -> usernumberNotExist;
1 -> monitorNumerNotExist;
2 -> monitorNumberBeSet;
3 -> parameterError;
4 -> resourceLimited;
5 -> noMonitor;
255 -> otherReason;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
Res1 = {'CreateLICTAck',Term1,Term2,Term3,Term4,Term5},
Res1.


%%================================
%%  DeleteLICTReq
%%================================
enc_DeleteLICTReq(Val) ->
    enc_DeleteLICTReq(Val, [<<48>>]).

enc_DeleteLICTReq(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4} = Val,

%%-------------------------------------------------
%% attribute messageSerialNo(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute icidValue(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute cCC-ID(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute x3TunnelDeleteReason(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex4 of
callEnd -> encode_tags([<<131>>], [0], 1);
abnormal -> encode_tags([<<131>>], [1], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_DeleteLICTReq(Tlv) ->
   dec_DeleteLICTReq(Tlv, [16]).

dec_DeleteLICTReq(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute messageSerialNo(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute icidValue(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_octet_string(V2, [131073]),
C1 = byte_size(Val2),
if 1 =< C1, C1 =< 255 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cCC-ID(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [131074]),
if 0 =< Val3, Val3 =< 4294967295 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute x3TunnelDeleteReason(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {case decode_integer(V4, []) of
0 -> callEnd;
1 -> abnormal;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
Res1 = {'DeleteLICTReq',Term1,Term2,Term3,Term4},
Res1.


%%================================
%%  DeleteLICTAck
%%================================
enc_DeleteLICTAck(Val) ->
    enc_DeleteLICTAck(Val, [<<48>>]).

enc_DeleteLICTAck(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute messageSerialNo(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute icidValue(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute cCC-ID(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_DeleteLICTAck(Tlv) ->
   dec_DeleteLICTAck(Tlv, [16]).

dec_DeleteLICTAck(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute messageSerialNo(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute icidValue(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_octet_string(V2, [131073]),
C1 = byte_size(Val2),
if 1 =< C1, C1 =< 255 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cCC-ID(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [131074]),
if 0 =< Val3, Val3 =< 4294967295 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'DeleteLICTAck',Term1,Term2,Term3},
Res1.


%%================================
%%  CommunicationContentReport
%%================================
enc_CommunicationContentReport(Val) ->
    enc_CommunicationContentReport(Val, [<<48>>]).

enc_CommunicationContentReport(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5} = Val,

%%-------------------------------------------------
%% attribute dataSerialNo(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute icidValue(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute cCC-ID(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute dataDirect(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
upLink -> encode_tags([<<131>>], [0], 1);
downLink -> encode_tags([<<131>>], [1], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute payloadList(5)   External X3-PROTOCOL:PayloadList
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_PayloadList'(Cindex5, [<<164>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_CommunicationContentReport(Tlv) ->
   dec_CommunicationContentReport(Tlv, [16]).

dec_CommunicationContentReport(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dataSerialNo(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute icidValue(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_octet_string(V2, [131073]),
C1 = byte_size(Val2),
if 1 =< C1, C1 =< 255 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cCC-ID(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [131074]),
if 0 =< Val3, Val3 =< 4294967295 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute dataDirect(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [131075]) of
0 -> upLink;
1 -> downLink;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute payloadList(5)   External X3-PROTOCOL:PayloadList
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = 'dec_PayloadList'(V5, [131076]),

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
Res1 = {'CommunicationContentReport',Term1,Term2,Term3,Term4,Term5},
Res1.


%%================================
%%  X3CheckStateReq
%%================================
enc_X3CheckStateReq(Val) ->
    enc_X3CheckStateReq(Val, [<<48>>]).

enc_X3CheckStateReq(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute neID(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_X3CheckStateReq(Tlv) ->
   dec_X3CheckStateReq(Tlv, [16]).

dec_X3CheckStateReq(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute neID(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 256 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
Res1 = {'X3CheckStateReq',Term1},
Res1.


%%================================
%%  X3CheckStateAck
%%================================
enc_X3CheckStateAck(Val) ->
    enc_X3CheckStateAck(Val, [<<48>>]).

enc_X3CheckStateAck(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute neID(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_X3CheckStateAck(Tlv) ->
   dec_X3CheckStateAck(Tlv, [16]).

dec_X3CheckStateAck(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute neID(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 256 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
Res1 = {'X3CheckStateAck',Term1},
Res1.


%%================================
%%  X3Interface
%%================================
enc_X3Interface(Val) ->
    enc_X3Interface(Val, [<<48>>]).

enc_X3Interface(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute protocolVersion(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
io1 -> encode_tags([<<128>>], [1], 1);
io2 -> encode_tags([<<128>>], [2], 1);
io3 -> encode_tags([<<128>>], [3], 1);
io4 -> encode_tags([<<128>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute x3cmdMessage(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_X3Interface_x3cmdMessage'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  X3Interface_x3cmdMessage
%%================================
enc_X3Interface_x3cmdMessage(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      createLictReq ->
         'enc_CreateLICTReq'(element(2,Val), [<<160>>]);
      createLictAck ->
         'enc_CreateLICTAck'(element(2,Val), [<<161>>]);
      deleteLictReq ->
         'enc_DeleteLICTReq'(element(2,Val), [<<162>>]);
      deleteLictAck ->
         'enc_DeleteLICTAck'(element(2,Val), [<<163>>]);
      communicationContentReport ->
         'enc_CommunicationContentReport'(element(2,Val), [<<164>>]);
      x3CheckStateReq ->
         'enc_X3CheckStateReq'(element(2,Val), [<<165>>]);
      x3CheckStateAck ->
         'enc_X3CheckStateAck'(element(2,Val), [<<166>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_X3Interface(Tlv) ->
   dec_X3Interface(Tlv, [16]).

dec_X3Interface(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolVersion(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
1 -> io1;
2 -> io2;
3 -> io3;
4 -> io4;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute x3cmdMessage(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_X3Interface_x3cmdMessage'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'X3Interface',Term1,Term2},
Res1.
'dec_X3Interface_x3cmdMessage'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'createLictReq'
    {131072, V1} -> 
        {createLictReq, 'dec_CreateLICTReq'(V1, [])};


%% 'createLictAck'
    {131073, V1} -> 
        {createLictAck, 'dec_CreateLICTAck'(V1, [])};


%% 'deleteLictReq'
    {131074, V1} -> 
        {deleteLictReq, 'dec_DeleteLICTReq'(V1, [])};


%% 'deleteLictAck'
    {131075, V1} -> 
        {deleteLictAck, 'dec_DeleteLICTAck'(V1, [])};


%% 'communicationContentReport'
    {131076, V1} -> 
        {communicationContentReport, 'dec_CommunicationContentReport'(V1, [])};


%% 'x3CheckStateReq'
    {131077, V1} -> 
        {x3CheckStateReq, 'dec_X3CheckStateReq'(V1, [])};


%% 'x3CheckStateAck'
    {131078, V1} -> 
        {x3CheckStateAck, 'dec_X3CheckStateAck'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.

%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    ok.

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_,L}|Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L)|Acc]);
collect_parts([{3,<<Unused,Bits/binary>>}|Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T,V}|Rest], Acc) ->
    collect_parts(Rest, [V|Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3,<<Unused,Bits/binary>>}|Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits|Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc|lists:reverse(Acc)]).

decode_integer(Tlv, TagIn) ->
    Bin = match_tags(Tlv, TagIn),
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

decode_octet_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary:copy(Bin).

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes,length(Bytes)}.

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error,{asn1,{encode_integer,Val}}}).

encode_integer_neg(- 1, [B1|_T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255|Acc]).

encode_integer_pos(0, [B|_Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255|Acc]).

encode_length(L) when L =< 127 ->
    {[L],1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len|Oct],Len + 1};
        true ->
            exit({error,{asn1,too_long_length_oct,Len}})
    end.

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar,LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag|Trest], BytesSoFar, LenSoFar) ->
    {Bytes2,L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag,Bytes2|BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar,LenSoFar}.

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_|_] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T,V}, [T]) ->
    V;
match_tags({T,V}, [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,V}], [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,_V}|_] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag,_V} = Tlv, [T|_Tt]) ->
    exit({error,{asn1,{wrong_tag,{{expected,T},{got,Tag,Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255|Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).
